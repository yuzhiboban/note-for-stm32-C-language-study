#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <termios.h>
#include <signal.h>
#include <errno.h>
#include <aio.h>

#define SERIAL_DEVICE "/dev/ttymxc0"  // 串口设备
#define BUFFER_SIZE 32               // 数据缓冲区大小

volatile int serial_fd = -1;         // 串口文件描述符
char input[BUFFER_SIZE];             // 输入缓冲区
char output[BUFFER_SIZE];            // 输出缓冲区

// 信号处理函数
void IOhandler(int signo, siginfo_t *info, void *context) {
    if (info->si_code == POLL_IN) { // 检测到数据可读事件
        ssize_t bytes_read = read(serial_fd, input, BUFFER_SIZE - 1);
        if (bytes_read > 0) {
            input[bytes_read] = '\0'; // 确保字符串以 '\0' 结尾
            printf("Parent received: %s\n", input);
        } else {
            perror("read");
        }
    }
}

// 配置串口函数
int configure_serial(int fd) {
    struct termios tty;

    if (tcgetattr(fd, &tty) != 0) {
        perror("tcgetattr");
        return -1;
    }

    // 配置波特率
    cfsetispeed(&tty, B115200);
    cfsetospeed(&tty, B115200);

    // 配置串口参数
    tty.c_cflag |= (CLOCAL | CREAD);
    tty.c_cflag &= ~CSIZE;
    tty.c_cflag |= CS8;         // 8 数据位
    tty.c_cflag &= ~PARENB;     // 无校验
    tty.c_cflag &= ~CSTOPB;     // 1 停止位
    tty.c_cflag &= ~CRTSCTS;    // 无硬件流控

    // 配置为原始模式
    tty.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
    tty.c_iflag &= ~(IXON | IXOFF | IXANY);
    tty.c_oflag &= ~OPOST;

    tty.c_cc[VMIN] = 1;   // 至少读取 1 个字符
    tty.c_cc[VTIME] = 0;  // 无超时

    if (tcsetattr(fd, TCSANOW, &tty) != 0) {
        perror("tcsetattr");
        return -1;
    }

    return 0;
}

// 子进程写数据
void child_write(int fd) {
    const char *messages[] = {
        "Message 1 from child\n",
        "Message 2 from child\n",
        "Message 3 from child\n",
        "Goodbye from child\n"
    };
    int num_messages = sizeof(messages) / sizeof(messages[0]);

    for (int i = 0; i < num_messages; i++) {
        ssize_t bytes_written = write(fd, messages[i], strlen(messages[i]));
        if (bytes_written < 0) {
            perror("write");
        } else {
            printf("Child sent: %s", messages[i]);
        }
        sleep(1); // 模拟发送间隔
    }
}

int main() {
    // 打开串口设备
    serial_fd = open(SERIAL_DEVICE, O_RDWR | O_NOCTTY | O_NONBLOCK);
    if (serial_fd < 0) {
        perror("open");
        return 1;
    }

    // 配置串口
    if (configure_serial(serial_fd) < 0) {
        close(serial_fd);
        return 1;
    }

    // 创建子进程
    pid_t pid = fork();
    if (pid < 0) {
        perror("fork");
        close(serial_fd);
        return 1;
    }

    if (pid == 0) {  // 子进程
        snprintf(output, BUFFER_SIZE, "Child process writing.\n");
        child_write(serial_fd);
        close(serial_fd);
        exit(0);
    } else {  // 父进程
        // 配置异步 I/O 信号处理
        struct sigaction sa;
        memset(&sa, 0, sizeof(sa));
        sa.sa_flags = SA_SIGINFO;
        sa.sa_sigaction = IOhandler;
        if (sigaction(SIGRTMIN, &sa, NULL) == -1) {
            perror("sigaction");
            close(serial_fd);
            return 1;
        }

        // 设置异步 I/O
        if (fcntl(serial_fd, F_SETOWN, getpid()) == -1) {
            perror("fcntl(F_SETOWN)");
            close(serial_fd);
            return 1;
        }
        if (fcntl(serial_fd, F_SETSIG, SIGRTMIN) == -1) {
            perror("fcntl(F_SETSIG)");
            close(serial_fd);
            return 1;
        }
        if (fcntl(serial_fd, F_SETFL, O_ASYNC | O_NONBLOCK) == -1) {
            perror("fcntl(F_SETFL)");
            close(serial_fd);
            return 1;
        }

        printf("Parent is ready to receive data. Press Ctrl+C to exit.\n");

        // 父进程主循环
        while (1) {
            pause(); // 等待信号
        }

        close(serial_fd);
    }

    return 0;
}
